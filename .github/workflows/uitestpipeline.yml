# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        apt-get install pulseaudio

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Clone mobile app repo
      uses: actions/checkout@master
      with:
        repository: truong-dang-gft/demo-android-dice-roller-images
        token: ${{ secrets.TRUONG_GITHUB_TOKEN }}

    - name: Build mobile app
      run: ./gradlew assembleDebug -x test

    - name: Create and boot emulator
      run: |
        BOOT_ANIMATION=""
        FAIL_COUNTER=0
        SECONDS_UNTIL_TIMEOUT=180
        
        function waitForEmulatorToStart() {
          until [[ "$BOOT_ANIMATION" =~ "stopped" ]]; do
          BOOT_ANIMATION=$(adb -e shell getprop init.svc.bootanim 2>&1 &) # Checks state of emulator while in the boot animation
          if [[ "$BOOT_ANIMATION" =~ "device not found" || "$BOOT_ANIMATION" =~ "device offline" || "$BOOT_ANIMATION" =~ "running" ]]; then
            ((FAIL_COUNTER += 1))
            echo -e "\nWaiting for emulator to start.. $FAIL_COUNTER"
            echo "Boot Animation State: $BOOT_ANIMATION"
            if [[ ${FAIL_COUNTER} -gt ${SECONDS_UNTIL_TIMEOUT} ]]; then
              echo -e "\nTimeout of $SECONDS_UNTIL_TIMEOUT seconds reached; failed to start emulator"
              exit 1
            fi
          fi
          sleep 1
          done
        }
        
        echo $PATH
        echo $ANDROID_HOME
        export ANDROID_SDK_HOME=$ANDROID_HOME
        echo $ANDROID_SDK_HOME
        
        echo no | sdkmanager --install "system-images;android-33-ext5;google_apis_playstore;x86_64"
        echo no | avdmanager create avd -n emulator-5554 -k "system-images;android-33-ext5;google_apis_playstore;x86_64"
        $ANDROID_HOME/emulator/emulator -avd emulator-5554 -no-audio -wipe-data -no-snapshot &
        waitForEmulatorToStart
      shell: bash
        
