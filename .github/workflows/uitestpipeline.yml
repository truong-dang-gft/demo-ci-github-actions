# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        sudo apt-get install pulseaudio

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Clone mobile app repo
      uses: actions/checkout@master
      with:
        repository: truong-dang-gft/demo-android-dice-roller-images
        token: ${{ secrets.TRUONG_GITHUB_TOKEN }}

    - name: Build mobile app
      run: ./gradlew assembleDebug -x test

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Create and boot emulator
      run: |
        function waitForEmulatorToStart() {
          boot_completed=false
          fail_counter=0
          while [[ "$boot_completed" == false ]]; do
            status=$(adb shell getprop sys.boot_completed | tr -d '\r')
            echo "Booting emulator ... Elapsed time: $fail_counter s"
            
            if [[ "$status" == "1" ]]; then
              boot_completed=true
            else
              (( fail_counter += 10))
              sleep 10
            fi
          done
        }
        
        echo $PATH
        echo $ANDROID_HOME
        export ANDROID_SDK_HOME=$ANDROID_HOME
        echo $ANDROID_SDK_HOME
        
        echo no | sdkmanager --install "system-images;android-33-ext5;google_apis_playstore;x86_64"
        echo no | avdmanager create avd -n emulator-5554 -k "system-images;android-33-ext5;google_apis_playstore;x86_64"
        $ANDROID_HOME/emulator/emulator -avd emulator-5554 -no-window -no-audio -no-snapshot &
        waitForEmulatorToStart
      shell: bash

    - name: Install mobile app
      run: |
        pwd
        
        function installApk() {
          is_installed=false
          fail_counter=0
          maximum_failed_time=10
          while [[ "$is_installed" == false ]] && [[ $fail_counter -lt $maximum_failed_time ]]; do
            status=$(adb -P 5037 -s emulator-5554 install -g ./app/build/outputs/apks/debug/app-debug.apk | tr -d '\r')
          
            if [[ "$status" == *"Success"* ]]; then
              is_installed=true
            else
              (( fail_counter += 1))
              sleep 20
            fi
          done
        }
        
        installApk
      shell: bash
        
